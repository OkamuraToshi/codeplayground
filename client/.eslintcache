[{"C:\\Users\\User\\Desktop\\Desktop\\Facul\\2020 2\\EMPREE\\MVP\\codeplayground\\client\\src\\reportWebVitals.js":"1","C:\\Users\\User\\Desktop\\Desktop\\Facul\\2020 2\\EMPREE\\MVP\\codeplayground\\client\\src\\App.js":"2","C:\\Users\\User\\Desktop\\Desktop\\Facul\\2020 2\\EMPREE\\MVP\\codeplayground\\client\\src\\index.js":"3"},{"size":362,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":4664,"mtime":1606412994819,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iuflom",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Desktop\\Desktop\\Facul\\2020 2\\EMPREE\\MVP\\codeplayground\\client\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\Desktop\\Facul\\2020 2\\EMPREE\\MVP\\codeplayground\\client\\src\\App.js",["15","16","17"],"import React, { Component } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport Pusher from \"pusher-js\";\nimport pushid from \"pushid\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\n\nimport \"codemirror/mode/htmlmixed/htmlmixed\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/javascript/javascript\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: \"\",\n      html: \"\",\n      css: \"\",\n      js: \"\"\n    };\n\n    this.pusher = new Pusher(\"d1756448b16aae05eed0\", {\n      cluster: \"ap3\",\n      forceTLS: true\n    });\n\n    this.channel = this.pusher.subscribe(\"editor\");\n  }\n\n  componentDidUpdate() {\n    this.runCode();\n  }\n\n  componentDidMount() {\n    this.setState({\n      id: pushid()\n    });\n\n    this.channel.bind(\"text-update\", data => {\n      const { id } = this.state;\n      if (data.id === id) return;\n\n      this.setState({\n        html: data.html,\n        css: data.css,\n        js: data.js\n      });\n    });\n  }\n\n  syncUpdates = () => {\n    const data = { ...this.state };\n\n    axios\n      .post(\"http://localhost:5000/update-editor\", data)\n      .catch(console.error);\n  };\n\n  runCode = () => {\n    const { html, css, js } = this.state;\n\n    const iframe = this.refs.iframe;\n    const document = iframe.contentDocument;\n    const documentContents = `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>Document</title>\n        <style>\n          ${css}\n        </style>\n      </head>\n      <body>\n        ${html}\n        <script type=\"text/javascript\">\n          ${js}\n        </script>\n      </body>\n      </html>\n    `;\n\n    document.open();\n    document.write(documentContents);\n    document.close();\n  };\n\n  render() {\n    const { html, js, css } = this.state;\n    const codeMirrorOptions = {\n      theme: \"material\",\n      lineNumbers: true,\n      scrollbarStyle: null,\n      lineWrapping: true\n    };\n\n    return (\n      <div className=\"App\">\n        <section className=\"cabecalho\">\n        <a href=\"principal.html\" target=\"frameaula\">TryAlgo! - MVP</a>\n        </section>\n        <section className=\"sidebar\">\n            <div className=\"sidebar\"><table className=\"tablesb\"><tr><td><a href=\"aulas.html\" target=\"frameaula\">Aulas</a></td></tr><tr><td>Forum</td></tr><tr><td>Salas</td></tr></table></div>\n        </section>\n        <section className=\"aula\">\n            <iframe name=\"frameaula\" title=\"frameaula\" className=\"frameaula\" src=\"principal.html\"/>\n        </section>\n        <section className=\"playground\">\n          <div className=\"code-editor html-code\">\n            <div className=\"editor-header\">HTML</div>\n            <CodeMirror\n              value={html}\n              options={{\n                mode: \"htmlmixed\",\n                ...codeMirrorOptions\n              }}\n              onBeforeChange={(editor, data, html) => {\n                this.setState({ html }, () => this.syncUpdates());\n              }}\n            />\n          </div>\n          <div className=\"code-editor css-code\">\n            <div className=\"editor-header\">CSS</div>\n            <CodeMirror\n              value={css}\n              options={{\n                mode: \"css\",\n                ...codeMirrorOptions\n              }}\n              onBeforeChange={(editor, data, css) => {\n                this.setState({ css }, () => this.syncUpdates());\n              }}\n            />\n          </div>\n          <div className=\"code-editor js-code\">\n            <div className=\"editor-header\">JavaScript</div>\n            <CodeMirror\n              value={js}\n              options={{\n                mode: \"javascript\",\n                ...codeMirrorOptions\n              }}\n              onBeforeChange={(editor, data, js) => {\n                this.setState({ js }, () => this.syncUpdates());\n              }}\n            />\n          </div>\n        </section>\n        <section className=\"lselect\">\n          <div class=\"dropdown\">\n    <button className=\"dropbtn\">Linguagem: \n      <i className=\"fa fa-caret-down\"></i>\n    </button>\n    <div className=\"dropdown-content\">\n      <a href=\"#\">HTML+CSS+JS</a>\n      <a href=\"#\"><strike>Linguagem C</strike></a>\n      <a href=\"#\"><strike>JAVA</strike></a>\n    </div>\n  </div> </section>\n        <section className=\"result\">\n          <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n  \n  ","C:\\Users\\User\\Desktop\\Desktop\\Facul\\2020 2\\EMPREE\\MVP\\codeplayground\\client\\src\\index.js",[],{"ruleId":"18","severity":1,"message":"19","line":186,"column":13,"nodeType":"20","endLine":187,"endColumn":27},{"ruleId":"18","severity":1,"message":"19","line":187,"column":50,"nodeType":"20","endLine":188,"endColumn":27},{"ruleId":"18","severity":1,"message":"19","line":189,"column":13,"nodeType":"20","endLine":190,"endColumn":27},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]